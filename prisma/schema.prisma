generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  emailVerified   Boolean   @default(false)
  image           String?
  stripeAccountId String?
  status          String    @default("HEALTHY") // HEALTHY, LIMITED, BLOCKED
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  sessions        Session[]
  accounts        Account[]
  clientRequests  ModelRequest[] @relation("ClientRequests")
  creatorRequests ModelRequest[] @relation("CreatorRequests")

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  scope                 String?
  password              String?   // Optional password field for authentication
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  idToken              String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model ModelRequest {
  id          String   @id @default(cuid())
  title       String
  description String
  price       Float
  modelLink   String?
  status      String   @default("WAITING_FOR_CREATOR") // WAITING_FOR_CREATOR, CREATION_IN_PROGRESS, WAITING_FOR_PAYMENT, DELIVERED, PROCESS_BLOCKED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  clientId    String
  client      User     @relation("ClientRequests", fields: [clientId], references: [id])
  creatorId   String?
  creator     User?    @relation("CreatorRequests", fields: [creatorId], references: [id])

  @@index([clientId])
  @@index([creatorId])
  @@map("model_request")
}
